generator client {
  provider   = "prisma-client-js"
  engineType = "library"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model User {
  id           String        @id @unique
  email        String        @unique
  createdAt    DateTime      @default(now())
  role          String   @default("USER")
  reservations Reservation[]
  restaurant   Restaurant? // Link back to the restaurant
}

model Restaurant {
  id           Int           @id @default(autoincrement())
  name         String
  location     String?
  
  // ADDED: Link to the User model for ownership
  ownerId      String?       @unique
  owner        User?         @relation(fields: [ownerId], references: [id])

  menus        Menu[]
  tables       Table[]
  orders       Order[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  role          String   @default("USER")
  reservations Reservation[]
  pricingRules PricingRule[]
}

model Menu {
  id           Int         @id @default(autoincrement())
  name         String
  description  String?
  price        Float
  restaurantId Int
  restaurant   Restaurant  @relation(fields: [restaurantId], references: [id])
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  orderItems   OrderItem[]
  tags         MenuTag[]
}

model MenuTag {
  id    Int    @id @default(autoincrement())
  name  String @unique
  menus Menu[]
}

model Table {
  id           Int           @id @default(autoincrement())
  number       Int
  capacity     Int
  restaurantId Int
  restaurant   Restaurant    @relation(fields: [restaurantId], references: [id])
  orders       Order[]
  role          String   @default("USER")
  reservations Reservation[]
  pricingRules PricingRule[]
}

model Order {
  id           Int         @id @default(autoincrement())
  customerName String
  partySize    Int
  status       String      @default("pending")
  restaurantId Int
  tableId      Int?
  restaurant   Restaurant  @relation(fields: [restaurantId], references: [id])
  table        Table?      @relation(fields: [tableId], references: [id])
  items        OrderItem[]
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model OrderItem {
  id       Int   @id @default(autoincrement())
  orderId  Int
  menuId   Int
  quantity Int
  order    Order @relation(fields: [orderId], references: [id])
  menu     Menu  @relation(fields: [menuId], references: [id])
}

model PricingRule {
  id                Int     @id @default(autoincrement())
  name              String?
  restaurantId      Int
  tableId           Int?
  dayOfWeek         Int
  startTime         String
  endTime           String
  adjustmentPercent Int
  isActive          Boolean @default(true)
  restaurant        Restaurant @relation(fields: [restaurantId], references: [id])
  table             Table?     @relation(fields: [tableId], references: [id])
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  @@index([restaurantId, dayOfWeek, startTime, endTime])
}

model Reservation {
  id            Int      @id @default(autoincrement())
  restaurantId  Int
  tableId       Int
  customerName  String
  partySize     Int
  startsAt      DateTime
  endsAt        DateTime
  status        String   @default("confirmed")
  isPrepaid     Boolean  @default(false)
  prepaidAmount Float?
  
  userId        String?
  user          User?    @relation(fields: [userId], references: [id])

  restaurant Restaurant @relation(fields: [restaurantId], references: [id])
  table      Table      @relation(fields: [tableId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  @@index([restaurantId, startsAt])
  @@index([tableId, startsAt, endsAt])
}

